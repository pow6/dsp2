
/////////////////////////////////////////////////////
// 構造体 BITMAPFILEHEADER
/////////////////////////////////////////////////////
#pragma pack(1)
typedef struct TagBITMAPFILEHEADER{//14byte
	unsigned short bfType;			// ファイルタイプ("BM"：0x4D42が入る)
	unsigned long  bfSize;			// ファイルサイズ
	unsigned short bfReserved1;		// 予約領域（0）
	unsigned short bfReserved2;		// 予約領域（0）
	unsigned long  bfOffBits;		// ファイル先頭からみたデータの位置（byte）
} BITMAPFILEHEADER;
#pragma pack()
/////////////////////////////////////////////////////
// 構造体 BITMAPINFOHEADER
/////////////////////////////////////////////////////
typedef struct{//40byte
	unsigned long biSize;			// BITMAPINFOHEADERのサイズ（40[byte]）
	         long biWidth;			// 幅（ピクセル）
	         long biHeight;			// 高さ（ピクセル）
	unsigned short biPlanes;		// カラープレーン数（1）
	unsigned short biBitCount;		// ビクセル当たりビット数（1,4,8,24,32bit）
	unsigned long biCompression;		// 圧縮（0：なし）
	unsigned long biSizeimage;		// 画像データサイズ（[byte]：0でよい）
	         long biXPixPerMeter;		// 水平解像度：m当たり画素数（ピクセル：0でよい）
	         long biYPixPerMeter;		// 垂直解像度：m当たり画素数（ピクセル：0でよい）
	unsigned long biClrUsed;		// カラーパレット数:色数（0でよい）
	unsigned long biClrImportant;		// 重要なカラーインデックス数（0でよい）
} BITMAPINFOHEADER;
/////////////////////////////////////////////////////
// 構造体 カラーパレット　RGBQuad
/////////////////////////////////////////////////////
typedef struct{//1,4,8のときのみそれぞれ2,16,256組の配列を確保
	unsigned char blue;			// Bule値
	unsigned char green;			// Green値
	unsigned char red;			// Red値
	unsigned char re;			// Reserve値
} RGBQUAD;
/////////////////////////////////////////////////////
// 構造体 データ保存　RGB
/////////////////////////////////////////////////////
typedef struct{
	unsigned char blue;			// Bule値
	unsigned char green;			// Green値
	unsigned char red;			// Red値
} RGB_DATA;

int main()
{

　　　　//省略
	fread(&bmp_file.bfType, sizeof(bmp_file.bfType),1,read);//ヘッダ読み込み例
	fread(&bmp_file.bfSize, sizeof(bmp_file.bfSize),1,read);
	//省略
}

注意:
waveファイルのヘッダでは，構造体丸ごとファイルへ入出力することが出来た(る)が，そうでない場合がある．
まとめてではなく，メンバごとファイルへ出力すると問題は起こらないはず．

ちなみに．．．
構造体のメンバの並びなどでメンバのデータがきちんと並んで保存されず，見えない隙間が空いていることがある．
この場合，自分が思っているメンバの合計サイズと，書き込まれる場合のサイズが異なることになりうまくいかない．
bmpのヘッダでもあるようだ．

これは，PCがメモリにアクセスするときに効率がよいよう，複数回同じメモリにアクセスしないよう保存しておくことに起因しており，
今回の場合はint(4バイト)単位で詰めていかれているようだ．
簡単ではあるがsizeofでBITMAPFILEHEADERを確認してみると良い．

これを避けるために#pragma pack()という命令がある．
例：#pragma pack(1)//構造体の前に記述：1バイト単位でパック
